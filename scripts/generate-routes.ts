import { getFiles, getRoutePath } from '../src/load-routes-utils'
import path from 'path'

const ROUTES_DIR = './src/routes'
const OUTPUT_FILE = './src/generated-routes.ts'

async function generateRoutesFile() {
	const absoluteRoutesDir = path.resolve(ROUTES_DIR)
	const files = await getFiles(absoluteRoutesDir)

	const importStatements: string[] = []
	const routeDefinitions: string[] = []
	const methods = ['GET', 'POST']

	importStatements.push(`import { Hono } from 'hono';`)

	let counter = 0
	for (const file of files) {
		const routePath = getRoutePath(file, absoluteRoutesDir)
			.replace(/\\/g, '/')
			.replace(/\/index$/, '')
		const relativePath = path
			.relative(path.dirname(OUTPUT_FILE), file)
			.replace(/\.(ts)$/, '')
			.replace(/\\/g, '/')
		console.log(`Processing file: ${file} with route path: ${relativePath}`)
		const moduleName = `routeModule${counter++}`

		importStatements.push(`import * as ${moduleName} from './${relativePath}';`)

		const tempHonoVar = `honoApp${moduleName}`
		routeDefinitions.push(`  const ${tempHonoVar} = new Hono();`)

		for await (const method of methods) {
			const module = await import(file)
			if (typeof module[method] === 'function') {
				if (routePath.endsWith('/*')) {
					const len = routePath.replace(/\/\*$/g, '').length + 1
					routeDefinitions.push(
						`  ${tempHonoVar}.${method.toLowerCase()}('/', async (c) => ${moduleName}.${method}(c, c.req.path.substring(${len}).split('/')));`
					)
				}
				else routeDefinitions.push(
					`  ${tempHonoVar}.${method.toLowerCase()}('/', ${moduleName}.${method});`
				)
			}
		}


		console.log(routePath)

		if (routePath === '/') {
			routeDefinitions.push(`  mainApp.route('${routePath}', ${tempHonoVar});`)
		} else {
			routeDefinitions.push(`  mainApp.route('${routePath}', ${tempHonoVar});`)
		}
	}

	const fileContent = `
// THIS FILE IS AUTO-GENERATED BY scripts/generate-routes.ts. DO NOT EDIT.
// To regenerate: bun run generate-routes

${importStatements.join('\n')}

/**
 * Registers all generated file-based routes to the main Hono application.
 * @param mainApp The main Hono application instance.
 */
export function registerGeneratedRoutes(mainApp: Hono) {
${routeDefinitions.join('\n')}
}
`

	await Bun.write(OUTPUT_FILE, fileContent.trimStart())
	console.log(
		`Generated routes file: ${OUTPUT_FILE} with ${files.length} routes.`
	)
}

generateRoutesFile().catch(console.error)
